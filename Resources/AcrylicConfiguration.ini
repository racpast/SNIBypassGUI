;
; （Translated by Racpast）
;
; 如果对该文件进行任何更改，则必须重新启动Acrylic DNS代理服务或控制台，以便查看其效果。
;
[GlobalSection]
;
; 主DNS服务器的IP地址。可以使用四点表示法表示IPv4地址，也可以使用冒号分组表示IPv6地址。
;
; 安装后，它会指向主要的 Google 公共 DNS 服务器。
;
PrimaryServerAddress=119.29.29.29
;
; 主DNS服务器应该监听的TCP/UDP端口。默认值为53，是DNS解析的标准端口。
; 只有当您使用非标准DNS服务器或与UDP/TCP不同的协议（例如，DNS-over-HTTPS协议的标准端口是443）时，才应该更改此值。
;
PrimaryServerPort=53
;
; 与主DNS服务器一起使用的协议。
;
; 目前支持的协议有UDP、TCP、SOCKS5和DOH（DNS-over-HTTPS）。
;
; 当使用UDP协议时，根据RFC 5625，Acrylic通过UDP或TCP转发DNS请求。
;
; 当使用TCP协议时，Acrylic只使用TCP转发DNS请求。由于为每个DNS请求建立TCP连接需要大量的时间，
; 并且在单位时间内可以打开的TCP连接的数量受到操作系统的限制，因此该协议应该仅在由于某些原因无法使用UDP协议的情况下使用。
;
; 当使用SOCKS5协议，Acrylic使用SOCKS5代理作为中介转发DNS请求到你的主DNS服务器，按照RFC 1928。
; 目前只支持SOCKS 5的NO AUTHENTICATION REQUIRED方式。
;
; 当使用DOH协议时，Acrylic使用DNS-over-HTTPS将DNS请求转发到主DNS服务器，DNS-over-HTTPS是一种通过HTTPS执行DNS解析的协议，
; 从而通过防止中间人攻击窃听和操纵DNS数据来增加用户隐私和安全性。请注意，当使用DNS-over-HTTPS时，
; 您的操作系统可以使用的加密算法（例如TLS版本）必须至少与您的主DNS服务器接受的一个加密算法相匹配，
; 这并不总是取决于您的操作系统版本和所选择的DNS服务器的组合。
; 例如，旧的Windows版本可能很难与需要TLS 1.1或1.2的DNS服务器建立HTTPS连接，因此可能需要安装特定的更新。
;
PrimaryServerProtocol=UDP
;
; 当使用DNS-over-HTTPS协议时，必须在下面指定主DNS服务器的查询路径。
;
PrimaryServerDoHProtocolPath=
;
; 当使用DNS-over-HTTPS协议时，必须在下面指定主DNS服务器的主机名。
;
PrimaryServerDoHProtocolHost=
;
; 当使用DNS-over-HTTPS协议时，您可以在下面指定Acrylic是否应该使用您的系统代理配置（system）或直接不使用代理（Direct）连接到互联网。
;
PrimaryServerDoHProtocolConnectionType=System
;
; 当使用DNS-over-HTTPS协议时，您可以在下面指定是否允许在向主DNS服务器发送请求时重用现有的TCP连接。
; 由于为每个DNS请求建立TCP连接需要大量的时间，并且在单位时间内可以打开的TCP连接的数量受到操作系统的限制，
; 因此重用现有的TCP连接是提高DNS-over-HTTPS协议性能的有效方法。
;
PrimaryServerDoHProtocolReuseConnections=Yes
;
; 当使用DNS-over-HTTPS协议时，您可以在下面指定当向主DNS服务器发送请求时，Acrylic是否应该使用WinHttp库而不是WinINet库。
; 对于Acrylic的目的，WinHttp更有效，因此更可取，但是在DNS服务器级别有可能在两者之间进行选择可以帮助解决可能出现的一些兼容性问题。
;
PrimaryServerDoHProtocolUseWinHttp=Yes
;
; 以下是Quad9公共DNS服务器的已知良好DNS-over-HTTPS（DoH）配置：
;
; PrimaryServerAddress=9.9.9.9
; PrimaryServerPort=443
; PrimaryServerProtocol=DOH
; PrimaryServerDoHProtocolPath=dns-query
; PrimaryServerDoHProtocolHost=dns.quad9.net
;
; 以下是Google公共DNS服务器的已知良好DNS-over-HTTPS（DoH）配置：
;
; PrimaryServerAddress=8.8.8.8
; PrimaryServerPort=443
; PrimaryServerProtocol=DOH
; PrimaryServerDoHProtocolPath=dns-query
; PrimaryServerDoHProtocolHost=dns.google
;
; 以下是CloudFlare公共DNS服务器的已知良好DNS-over-HTTPS（DoH）配置：
;
; PrimaryServerAddress=1.1.1.1
; PrimaryServerPort=443
; PrimaryServerProtocol=DOH
; PrimaryServerDoHProtocolPath=dns-query
; PrimaryServerDoHProtocolHost=cloudflare-dns.com
;
; 当使用SOCKS5协议时，您可以在下方指定要使用的SOCKS 5代理服务器的IP地址，作为通往主DNS服务器的中介。
; 您可以使用点分十进制的IPv4地址或冒分十六进制的IPv6地址。
;
PrimaryServerSocks5ProtocolProxyAddress=
;
; 当使用SOCKS5协议时，您可以在下方指定上述所描述的SOCKS 5代理服务器应该监听的TCP端口。
;
PrimaryServerSocks5ProtocolProxyPort=
;
; 域名关联掩码是一个由分号分隔的值或通配符组成的列表，它允许限制特定域名被转发到哪个DNS服务器。
;
; 在以下示例中，只有以“.com”结尾的域名请求才会被转发到主DNS服务器：
;
; PrimaryServerDomainNameAffinityMask=*.com
;
; 在以下示例中，只有以“.com”和“.org”结尾的域名请求被转发到主DNS服务器：
;
; PrimaryServerDomainNameAffinityMask=*.com;*.org
;
; 否定可以通过在值或通配符前加上插入符号（^）来表示。
;
; 在以下示例中，只有不以“.com”或“.org”结尾的域名请求才会被转发到主DNS服务器
; （在这种情况下，最后一个全捕获值特别重要，因为如果缺少，则不会将任何请求转发到主DNS服务器）：
;
; PrimaryServerDomainNameAffinityMask=^*.com;^*.org;*
;
; 域名亲和掩码规则会根据它们被写入的顺序进行评估，第一个匹配的正则规则和第一个不匹配的否定规则分别决定了一个正结果
; （即DNS查询被转发到DNS服务器）或一个负结果（即DNS查询不被转发到DNS服务器）。如果没有任何定义的规则匹配，则确定一个负结果。
;
PrimaryServerDomainNameAffinityMask=
;
; 查询类型关联掩码是一组以分号分隔的值，用于限制将特定查询类型转发到哪个DNS服务器。
;
; 在以下示例中，只有A、AAAA、MX和SRV查询类型的请求被转发到主DNS服务器：
;
; PrimaryServerQueryTypeAffinityMask=A;AAAA;MX;SRV
;
; 支持所有DNS查询类型，无论是显式地使用A、AAAA、ANY、CNAME、HTTPS、MX、NS、PTR、SOA、SRV和TXT，还是隐式地使用它们的十进制值。
;
PrimaryServerQueryTypeAffinityMask=
;
; 您可以在下面指定是否忽略来自主DNS服务器的失败响应。
;
IgnoreFailureResponsesFromPrimaryServer=No
;
; 您可以在下面指定是否忽略来自主DNS服务器的否定响应。
;
IgnoreNegativeResponsesFromPrimaryServer=No
;
; 您的备用DNS服务器的配置。
; 有关更多详细信息，请参阅主DNS服务器配置说明。
;
; 在安装时，它指向备用Google公共DNS服务器。
;
SecondaryServerAddress=182.254.116.116
SecondaryServerPort=53
SecondaryServerProtocol=UDP
SecondaryServerDoHProtocolPath=
SecondaryServerDoHProtocolHost=
SecondaryServerDoHProtocolConnectionType=System
SecondaryServerDoHProtocolReuseConnections=Yes
SecondaryServerDoHProtocolUseWinHttp=Yes
SecondaryServerSocks5ProtocolProxyAddress=
SecondaryServerSocks5ProtocolProxyPort=
SecondaryServerDomainNameAffinityMask=
SecondaryServerQueryTypeAffinityMask=
IgnoreFailureResponsesFromSecondaryServer=No
IgnoreNegativeResponsesFromSecondaryServer=No
;
; 您的第三个DNS服务器的配置。
; 有关更多详细信息，请参阅主DNS服务器配置说明。
;
TertiaryServerAddress=114.114.114.114
TertiaryServerPort=53
TertiaryServerProtocol=UDP
TertiaryServerDoHProtocolPath=
TertiaryServerDoHProtocolHost=
TertiaryServerDoHProtocolConnectionType=System
TertiaryServerDoHProtocolReuseConnections=Yes
TertiaryServerDoHProtocolUseWinHttp=Yes
TertiaryServerSocks5ProtocolProxyAddress=
TertiaryServerSocks5ProtocolProxyPort=
TertiaryServerDomainNameAffinityMask=
TertiaryServerQueryTypeAffinityMask=
IgnoreFailureResponsesFromTertiaryServer=No
IgnoreNegativeResponsesFromTertiaryServer=No
;
; 您的第四个DNS服务器的配置。
; 有关更多详细信息，请参阅主DNS服务器配置说明。
;
QuaternaryServerAddress=114.114.114.115
QuaternaryServerPort=53
QuaternaryServerProtocol=UDP
QuaternaryServerDoHProtocolPath=
QuaternaryServerDoHProtocolHost=
QuaternaryServerDoHProtocolConnectionType=System
QuaternaryServerDoHProtocolReuseConnections=Yes
QuaternaryServerDoHProtocolUseWinHttp=Yes
QuaternaryServerSocks5ProtocolProxyAddress=
QuaternaryServerSocks5ProtocolProxyPort=
QuaternaryServerDomainNameAffinityMask=
QuaternaryServerQueryTypeAffinityMask=
IgnoreFailureResponsesFromQuaternaryServer=No
IgnoreNegativeResponsesFromQuaternaryServer=No
;
; 您的第五个DNS服务器的配置。
; 有关更多详细信息，请参阅主DNS服务器配置说明。
;
QuinaryServerAddress=223.5.5.5
QuinaryServerPort=53
QuinaryServerProtocol=UDP
QuinaryServerDoHProtocolPath=
QuinaryServerDoHProtocolHost=
QuinaryServerDoHProtocolConnectionType=System
QuinaryServerDoHProtocolReuseConnections=Yes
QuinaryServerDoHProtocolUseWinHttp=Yes
QuinaryServerSocks5ProtocolProxyAddress=
QuinaryServerSocks5ProtocolProxyPort=
QuinaryServerDomainNameAffinityMask=
QuinaryServerQueryTypeAffinityMask=
IgnoreFailureResponsesFromQuinaryServer=No
IgnoreNegativeResponsesFromQuinaryServer=No
;
; 您的第六个DNS服务器的配置。
; 有关更多详细信息，请参阅主DNS服务器配置说明。
;
SenaryServerAddress=223.6.6.6
SenaryServerPort=53
SenaryServerProtocol=UDP
SenaryServerDoHProtocolPath=
SenaryServerDoHProtocolHost=
SenaryServerDoHProtocolConnectionType=System
SenaryServerDoHProtocolReuseConnections=Yes
SenaryServerDoHProtocolUseWinHttp=Yes
SenaryServerSocks5ProtocolProxyAddress=
SenaryServerSocks5ProtocolProxyPort=
SenaryServerDomainNameAffinityMask=
SenaryServerQueryTypeAffinityMask=
IgnoreFailureResponsesFromSenaryServer=No
IgnoreNegativeResponsesFromSenaryServer=No
;
; 您的第七个DNS服务器的配置。
; 有关更多详细信息，请参阅主DNS服务器配置说明。
;
SeptenaryServerAddress=101.226.4.6
SeptenaryServerPort=53
SeptenaryServerProtocol=UDP
SeptenaryServerDoHProtocolPath=
SeptenaryServerDoHProtocolHost=
SeptenaryServerDoHProtocolConnectionType=System
SeptenaryServerDoHProtocolReuseConnections=Yes
SeptenaryServerDoHProtocolUseWinHttp=Yes
SeptenaryServerSocks5ProtocolProxyAddress=
SeptenaryServerSocks5ProtocolProxyPort=
SeptenaryServerDomainNameAffinityMask=
SeptenaryServerQueryTypeAffinityMask=
IgnoreFailureResponsesFromSeptenaryServer=No
IgnoreNegativeResponsesFromSeptenaryServer=No
;
; 您的第八个DNS服务器的配置。
; 有关更多详细信息，请参阅主DNS服务器配置说明。
;
OctonaryServerAddress=218.30.118.6
OctonaryServerPort=53
OctonaryServerProtocol=UDP
OctonaryServerDoHProtocolPath=
OctonaryServerDoHProtocolHost=
OctonaryServerDoHProtocolConnectionType=System
OctonaryServerDoHProtocolReuseConnections=Yes
OctonaryServerDoHProtocolUseWinHttp=Yes
OctonaryServerSocks5ProtocolProxyAddress=
OctonaryServerSocks5ProtocolProxyPort=
OctonaryServerDomainNameAffinityMask=
OctonaryServerQueryTypeAffinityMask=
IgnoreFailureResponsesFromOctonaryServer=No
IgnoreNegativeResponsesFromOctonaryServer=No
;
; 您的第九个DNS服务器的配置。
; 有关更多详细信息，请参阅主DNS服务器配置说明。
;
NonaryServerAddress=123.125.81.6
NonaryServerPort=53
NonaryServerProtocol=UDP
NonaryServerDoHProtocolPath=
NonaryServerDoHProtocolHost=
NonaryServerDoHProtocolConnectionType=System
NonaryServerDoHProtocolReuseConnections=Yes
NonaryServerDoHProtocolUseWinHttp=Yes
NonaryServerSocks5ProtocolProxyAddress=
NonaryServerSocks5ProtocolProxyPort=
NonaryServerDomainNameAffinityMask=
NonaryServerQueryTypeAffinityMask=
IgnoreFailureResponsesFromNonaryServer=No
IgnoreNegativeResponsesFromNonaryServer=No
;
; 您的第十个DNS服务器的配置。
; 有关更多详细信息，请参阅主DNS服务器配置说明。
;
DenaryServerAddress=140.207.198.6
DenaryServerPort=53
DenaryServerProtocol=UDP
DenaryServerDoHProtocolPath=
DenaryServerDoHProtocolHost=
DenaryServerDoHProtocolConnectionType=System
DenaryServerDoHProtocolReuseConnections=Yes
DenaryServerDoHProtocolUseWinHttp=Yes
DenaryServerSocks5ProtocolProxyAddress=
DenaryServerSocks5ProtocolProxyPort=
DenaryServerDomainNameAffinityMask=
DenaryServerQueryTypeAffinityMask=
IgnoreFailureResponsesFromDenaryServer=No
IgnoreNegativeResponsesFromDenaryServer=No
;
; 您可以在下方指定Acrylic是否应该拦截IPv6查找请求（也称为AAAA类型的DNS请求）。
;
SinkholeIPv6Lookups=No
;
; 您可以通过选择‘是’而不是‘否’，来指示Acrylic将私有IP范围的逆向查找请求（也称为PTR类型的DNS请求）转发到您的DNS服务器。
; 除了保护您和您的DNS服务器免受这些通常不必要的查询流量影响之外，选择‘否’通常也是一个更好的选择，
; 以避免泄露有关您私有地址空间的信息。
;
ForwardPrivateReverseLookups=No
;
; Acrylic DNS代理缓存机制解析
;
; 当Acrylic从客户端接收到DNS请求时，会首先搜索主机缓存（一个基于AcrylicHosts.txt文件的内存静态缓存）。
; 如果在那里找不到对应的条目，请求将接着在地址缓存（一个由AcrylicCache.dat文件支持的内存动态缓存）中进行搜索。
; 此时，可能发生以下三种情况之一：
;
; 一、请求在地址缓存中未找到，或其对应的响应比“AddressCacheScavengingTime”（地址缓存清除时间）分钟更旧：
; 在这种情况下，原始请求将同时转发给所有配置的DNS服务器。对客户端的响应将延迟，
; 直到其中一个DNS服务器提供有效响应。来自其他DNS服务器的所有其他响应都将被丢弃。
;
; 二、请求在地址缓存中找到，且其对应的响应比“AddressCacheSilentUpdateTime”（地址缓存静默更新时间）分钟更旧，
; 但不超过“AddressCacheScavengingTime”分钟：在这种情况下，会立即从地址缓存中向客户端发送响应，并且像之前的情况一样，
; 原始请求也会同时转发给所有配置的DNS服务器。来自其中一个DNS服务器的第一个有效响应将用于静默更新地址缓存，
; 而来自其他DNS服务器的所有其他响应都将被丢弃。
;
; 三、请求在地址缓存中找到，且其对应的响应比“AddressCacheSilentUpdateTime”分钟更新：在这种情况下，
; 会立即从地址缓存中向客户端发送响应，并且不会发生与任何配置的DNS服务器的网络活动。
;
; 请注意，为了最大限度地减少磁盘活动，地址缓存仅在Acrylic停止或系统关闭时才会从内存刷新到磁盘。
;
; 现在关于缓存参数：
;
; 地址缓存中失败响应的生存时间（以分钟为单位）。
;
AddressCacheFailureTime=0
;
; 地址缓存中否定响应的生存时间（以分钟为单位）。
;
AddressCacheNegativeTime=60
;
; 地址缓存中肯定响应的生存时间（以分钟为单位）。
;
AddressCacheScavengingTime=5760
;
; 如果发生请求，地址缓存中的项目必须静默更新的时间（以分钟为单位）。
;
AddressCacheSilentUpdateTime=1440
;
; 地址缓存中删除过时项目的时间（以分钟为单位）。值为0表示从不修剪地址缓存。
;
AddressCachePeriodicPruningTime=720
;
; 地址缓存域名亲和力掩码是一个由分号分隔的值或通配符列表，它允许限制哪些域名的DNS响应将被缓存在地址缓存中。
;
AddressCacheDomainNameAffinityMask=^dns.msftncsi.com;^ipv6.msftconnecttest.com;^ipv6.msftncsi.com;^www.msftconnecttest.com;^www.msftncsi.com;*
;
; 地址缓存查询类型亲和力掩码是一个由分号分隔的值列表，它允许限制哪些查询类型的DNS响应将被缓存在地址缓存中。
;
; 支持所有DNS查询类型，可以显式地使用A、AAAA、ANY、CNAME、HTTPS、MX、NS、PTR、SOA、SRV和TXT，或者隐式地使用它们的十进制值。
;
AddressCacheQueryTypeAffinityMask=A;AAAA;CNAME;HTTPS;MX;NS;PTR;SOA;SRV;TXT
;
; 您可以通过选择“Yes”而不是“No”来禁用与地址缓存相关的任何磁盘活动。如果您这样做，Acrylic将仅在内存中使用地址缓存。
;
AddressCacheInMemoryOnly=No
;
; 您可以通过选择“Yes”而不是“No”来完全禁用地址缓存。如果您这样做，Acrylic将仅作为转发DNS代理工作。
;
AddressCacheDisabled=No
;
; Acrylic绑定的本地IPv4地址。0.0.0.0的值表示Acrylic应该绑定到所有可用的地址，因此它能够接收来自您所有网络接口的DNS请求。
; 如果设置为您的网络接口之一的IPv4地址，则Acrylic将仅能从该特定网络接口接收DNS请求。而空值则表示不在IPv4上进行绑定。
;
LocalIPv4BindingAddress=0.0.0.0
;
; Acrylic绑定的本地UDPv4端口。默认值53是DNS解析的标准端口。除非您使用的是非标准DNS客户端，否则不应更改此值。
;
LocalIPv4BindingPort=53
;
; Acrylic绑定的本地IPv6地址。0:0:0:0:0:0:0:0（或简写为::）的值表示Acrylic应该绑定到所有可用的地址，
; 因此它能够接收来自您所有网络接口的DNS请求。如果设置为您的网络接口之一的IPv6地址，则Acrylic将仅能从该特定网络接口接收DNS请求。
; 而空值则表示不在IPv6上进行绑定。
;
LocalIPv6BindingAddress=0:0:0:0:0:0:0:0
;
; Acrylic绑定的本地UDPv6端口。默认值53是DNS解析的标准端口。除非您使用的是非标准DNS客户端，否则不应更改此值。
;
LocalIPv6BindingPort=53
;
; 在Windows Vista或Windows Server 2008之前的Windows版本中，IPv6协议通常不是默认安装的。对于Windows 2000，
; 有可用的Microsoft IPv6技术预览包可供下载，而对于Windows XP，则必须将IPv6协议添加到网络连接属性窗口中的可用网络协议列表中。
;
; 如果您想在Windows Vista或Windows Server 2008之前的Windows版本上为Acrylic启用本地IPv6绑定，
; 您可以在安装所有必要的先决条件后选择下面的'是'。
;
LocalIPv6BindingEnabledOnWindowsVersionsPriorToWindowsVistaOrWindowsServer2008=No
;
; 为Acrylic生成的DNS响应设置的生存时间（以秒为单位）（例如，由AcrylicHosts.txt文件中包含的映射生成的响应）。
;
GeneratedResponseTimeToLive=300
;
; 配置为使用UDP协议的DNS服务器响应的最大等待时间（以毫秒为单位）。
;
ServerUdpProtocolResponseTimeout=3989
;
; 配置为使用TCP协议的DNS服务器响应的首字节的最大等待时间（以毫秒为单位）。
;
ServerTcpProtocolResponseTimeout=3989
;
; 配置为使用TCP协议的DNS服务器响应的其余字节的最大等待时间（以毫秒为单位）。
;
ServerTcpProtocolInternalTimeout=3989
;
; 当代表配置为使用SOCKS5协议的DNS服务器与中间SOCKS 5代理服务器通信时，以下事件的最大等待时间（以毫秒为单位）。
;
ServerSocks5ProtocolProxyFirstByteTimeout=3989
ServerSocks5ProtocolProxyOtherBytesTimeout=3989
ServerSocks5ProtocolProxyRemoteConnectTimeout=3989
ServerSocks5ProtocolProxyRemoteResponseTimeout=3989
;
; 命中日志是一个文本文件，用于记录Acrylic接收到的每个DNS请求和DNS响应。
;
; 通过为HitLogFileName参数指定一个非空值来激活它，该文件包含以下以制表符分隔的字段的行：
;
; 1、DNS请求或响应的时间戳，格式为YYYY-MM-DD HH:MM:SS.FFF（本地时间）。
; 2、DNS请求的来源IP地址或DNS响应的目的地IP地址。
; 3、DNS请求或响应的状态码：
;        X => 由Acrylic直接解析
;        H => 使用主机缓存解析
;        C => 使用地址缓存解析
;        F => 转发到您的至少一个DNS服务器
;        R => 从您的某个DNS服务器接受响应
;        U => 从您的某个DNS服务器接受静默更新
; 4、DNS响应来自的DNS服务器的索引。
; 5、DNS服务器生成DNS响应所需的时间（以毫秒为单位）。
; 6、解析的DNS请求或响应。
;
; 解析后的DNS请求如下所示：
;
; OC=0;RD=1;QDC=1;Q[1]=x.com;T[1]=A
;
; 其中：
;
; 1、OC=0表示DNS操作码（OPCODE）为0。可能的值有：0 = 标准查询（QUERY），1 = 反向查询（IQUERY），2 = 服务器状态请求（STATUS）。
; 2、RD=1表示DNS响应递归期望位（RD）为1。如果设置了RD，它会指示名称服务器递归地处理查询。
; 3、QDC=1表示DNS请求中包含的查询数量（QDCOUNT）为1。
; 4、Q[1]=x.com表示DNS查询1引用的是“x.com”域名。
; 5、T[1]=A表示DNS查询1的类型为A（IPv4）。
;
; 解析后的DNS请求如下所示：
;
; OC=0;RC=0;TC=0;RD=1;RA=1;AA=0;QDC=1;ANC=2;NSC=0;ARC=0;Q[1]=x.com;T[1]=CNAME;A[1]=x.com>y.com;T[2]=A;A[2]=y.com>1.2.3.4
;
; 其中:
;
; 1、OC=0表示DNS操作码（OPCODE）为0。可能的值有：0 = 标准查询（QUERY），1 = 反向查询（IQUERY），2 = 服务器状态请求（STATUS）。
; 2、RC=0表示DNS响应码（RCODE）为0。可能的值有：0 = 没有错误条件，1 = 格式错误（名称服务器无法解释查询），
;    2 = 服务器故障（名称服务器由于问题无法处理这个查询），3 = 名字错误（有意义的只有一个权威名字服务器的响应，
;    这段代码中引用意味着域名查询不存在），4 = 没有实现（这个名称服务器不支持请求的查询），
;    5 = 拒绝（名称服务器由于策略原因拒绝执行指定的操作）。
; 3、TC=0表示DNS响应截断位（TC）为0。此位指定由于长度大于传输通道允许的长度，此消息已被截断。
; 4、RD=1表示DNS响应递归期望位（RD）的值为0。在响应中，RD通常不直接设置，而是复制请求的RD位值。
; 5、RA=1表示DNS响应递归可用位（RA）为1。
; 6、AA=0表示DNS响应权威应答位（AA）为0。此位指定响应的名称服务器是问题部分中域名的权威机构。
; 7、QDC=1表示DNS响应中包含的查询数量（QDCOUNT）为1。
; 8、ANC=2表示DNS响应中包含的答案数量（ANCOUNT）为2。
; 9、NSC=0表示DNS响应中包含的名称服务器记录数量（NSCOUNT）为0。
; 10、ARC=0表示DNS响应中包含的附加记录数量（ARCOUNT）为0。
; 11、Q[1]=x.com表示DNS查询1指的是“x.com”域名。
; 12、T[1]=CNAME表示DNS答案1的类型为CNAME（规范名称）。
; 13、A[1]=x.com>y.com表示指向“x.com”域名的DNS答案1是“y.com”。
; 14、T[2]=A表示DNS答案2的类型为A（IPv4）。
; 15、A[2]=y.com>1.2.3.4表示指向“y.com”域名的DNS答案2是“1.2.3.4”。
;
; 关于HitLogFileName，您可以使用绝对路径或相对路径，通过在文件名中包含%DATE%模板可以实现某种形式的每日日志轮换。
; 您可以在文件名中使用的所有模板的完整列表如下所示：
;
; %DATE%
; 当前日期，格式为YYYYMMDD。
;
; %TEMP%
; TEMP环境变量的当前值。
;
; %APPDATA%
; APPDATA环境变量的当前值。
;
; %LOCALAPPDATA%
; LOCALAPPDATA环境变量的当前值。
;
; 示例：
;
; HitLogFileName=HitLog.%DATE%.txt
; HitLogFileName=%TEMP%\AcrylicDNSProxyHitLog.%DATE%.txt
;
HitLogFileName=
;
; 过滤器（上面解释的一个或多个状态码的组合），用于控制哪些内容被写入命中日志。
;
HitLogFileWhat=XHCF
;
; 您可以选择“Yes”而不是“No”，以将DNS请求和响应的完整转储（除了上面解释的DNS格式剖析之外）写入命中日志。
;
HitLogFullDump=No
;
; 在将它们刷新到磁盘之前，可以在内存中保留的最大命中日志项数。出于性能原因，只有当命中日志内存缓冲区已满、
; Acrylic停止或系统关闭时，命中日志才会被刷新到磁盘，因此从接收DNS请求或响应到将其详细信息写入命中日志之间可能会有延迟。
;
HitLogMaxPendingHits=512
;
; 允许来自其他计算机的请求
;
; 出于安全考虑，Acrylic的默认行为是拒绝处理来自其他计算机的请求，
; 但可以在下面的AllowedAddressesSection部分中指定一个IP地址列表（允许使用通配符），这些地址可以发送Acrylic允许处理的请求。
; 你需要为每个条目指定一个不同的键名，如下例所示：
;
; [AllowedAddressesSection]
; IP1=192.168.45.254 -- 单一IP地址
; IP2=192.168.44.100 -- 另一个单一IP地址
; IP3=192.168.100.* -- 所有以192.168.100开头的地址
; IP4=172.16.* -- 所有以172.16开头的地址
;
; 出于安全考虑，不建议允许Acrylic处理来自任何IP地址的请求，但也可以这样做，如下例所示：
;
; [AllowedAddressesSection]
; IP1=*
;
; 你还必须创建一个防火墙规则，以允许指向两个Acrylic可执行文件（“AcrylicService.exe”和“AcrylicConsole.exe”）的入站流量。
;
[AllowedAddressesSection]